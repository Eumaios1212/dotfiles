#!/usr/bin/env sh
#
# Git pre-commit hook:
#   1) Non-ASCII filename guard
#   2) Whitespace check  (allows Markdown hard-break “two spaces”)
#   3) markdownlint       (*.md)
#   4) flake8             (*.py)
#   5) shellcheck         (*.sh)

###############################################################################
# 1.  Determine base tree for diffs
###############################################################################
if git rev-parse --verify HEAD >/dev/null 2>&1; then
    against=HEAD
else
    against=$(git hash-object -t tree /dev/null)     # initial commit
fi

###############################################################################
# 2.  Block non-ASCII filenames unless explicitly allowed
###############################################################################
allownonascii=$(git config --type=bool hooks.allownonascii)
exec 1>&2   # show all output via stderr

if [ "$allownonascii" != "true" ] &&
   test "$(git diff --cached --name-only --diff-filter=A -z "$against" |
           LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0; then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems on some platforms.
To bypass:  git config hooks.allownonascii true
EOF
    exit 1
fi

###############################################################################
# 3.  Whitespace errors
#     • Allow trailing-space line-breaks in Markdown.
###############################################################################
ws_out=$(git diff-index --check --cached "$against" --)

if [ -n "$ws_out" ]; then
    # Remove:
    #   • the diagnostic line for trailing whitespace in *.md / *.markdown
    #   • the following context line that begins with “+”
    ws_filtered=$(printf '%s\n' "$ws_out" |
        grep -Ev '\.(md|markdown):[0-9]+: trailing whitespace\.|^\+')

    if [ -n "$ws_filtered" ]; then
        echo "$ws_filtered"
        echo
        echo "Whitespace errors detected (Markdown hard-breaks allowed). Commit aborted."
        exit 1
    fi
fi

###############################################################################
# 4. Markdown lint  (mdl / markdownlint / markdownlint-cli)
###############################################################################
staged_md=$(git diff --cached --name-only --diff-filter=ACM \
            | grep -Ei '\.(md|markdown)$' || true)

if [ -n "$staged_md" ]; then
    # Pick the first available linter binary
    if   command -v mdl >/dev/null 2>&1;            then md_cmd="mdl"
    elif command -v markdownlint >/dev/null 2>&1;   then md_cmd="markdownlint"
    elif command -v markdownlint-cli >/dev/null 2>&1; then md_cmd="markdownlint-cli"
    else
        echo "Warning: no Markdown linter found; skipping Markdown lint."
        md_cmd=""
    fi

    if [ -n "$md_cmd" ]; then
        echo "Running $md_cmd on Markdown files…"
        # Quote the list correctly: use xargs -r to handle spaces
        printf '%s\0' $staged_md | xargs -0 "$md_cmd"
        if [ $? -ne 0 ]; then
            echo "Markdown linting failed — commit aborted."
            exit 1
        fi
    fi
fi

###############################################################################
# 5.  Python lint (flake8) — skip silently if none staged
###############################################################################
staged_py=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -n "$staged_py" ]; then
    if command -v flake8 >/dev/null 2>&1; then
        echo "Running flake8 on Python files…"
        flake8 $staged_py
        if [ $? -ne 0 ]; then
            echo "Python linting failed — commit aborted."
            exit 1
        fi
    else
        echo "Warning: flake8 not installed; skipping Python lint."
    fi
fi

###############################################################################
# 6.  Shell-script lint (shellcheck) — skip silently if none staged
###############################################################################
staged_sh=$(git diff --cached --name-only --diff-filter=ACM | grep '\.sh$' || true)

if [ -n "$staged_sh" ]; then
    if command -v shellcheck >/dev/null 2>&1; then
        echo "Running shellcheck on shell scripts…"
        # -x follows sourced files; -s sh enforces POSIX sh (change if you use bash features)
        if ! shellcheck -x -s sh $staged_sh; then
            echo "Shell linting failed — commit aborted."
            exit 1
        fi
    else
        echo "Warning: shellcheck not installed; skipping shell lint."
    fi
fi

exit 0
